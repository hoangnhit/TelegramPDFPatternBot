import os, asyncio
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from tracing import process_pdf_to_pdf, process_imagefile_to_pdf

load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
DOWNLOAD_DIR = os.getenv("DOWNLOAD_DIR", "./work")
os.makedirs(DOWNLOAD_DIR, exist_ok=True)

HELP = """G·ª≠i PDF ho·∫∑c ·∫£nh ƒë·ªÉ bot v·∫Ω l·∫°i ƒë∆∞·ªùng k·∫ª th√†nh file khu√¥n PDF ‚úÇÔ∏è

T√πy ch·ªânh (ghi v√†o caption):
‚Ä¢ invert=true/false - ƒë·∫£o m√†u (m·∫∑c ƒë·ªãnh: true)
‚Ä¢ stroke=2.0 - ƒë·ªô d√†y n√©t (m·∫∑c ƒë·ªãnh: 2.0)
‚Ä¢ dpi=400 - ƒë·ªô ph√¢n gi·∫£i (m·∫∑c ƒë·ªãnh: 400)
‚Ä¢ precision=0.0005 - ƒë·ªô ch√≠nh x√°c (nh·ªè h∆°n = chi ti·∫øt h∆°n, m·∫∑c ƒë·ªãnh: 0.0005, ƒë·∫∑t 0 ƒë·ªÉ gi·ªØ 100% chi ti·∫øt)
‚Ä¢ min_len=20 - ƒë·ªô d√†i n√©t t·ªëi thi·ªÉu (m·∫∑c ƒë·ªãnh: 20)

V√≠ d·ª•: precision=0 dpi=600"""

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Xin ch√†o üëã\n" + HELP)

def parse_opts(text: str):
    opts = {"invert": True, "stroke": 2.0, "dpi": 400, "precision": 0.0005, "min_len": 20}
    if not text: return opts
    for t in text.split():
        if t.startswith("invert="): opts["invert"] = t.split("=")[1].lower() in ["true","1"]
        elif t.startswith("stroke="): opts["stroke"] = float(t.split("=")[1])
        elif t.startswith("dpi="): opts["dpi"] = int(t.split("=")[1])
        elif t.startswith("precision="): opts["precision"] = float(t.split("=")[1])
        elif t.startswith("min_len="): opts["min_len"] = int(t.split("=")[1])
    return opts

async def handle_doc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    cap = msg.caption or ""
    opts = parse_opts(cap)
    
    is_pdf = False
    if msg.document:
        file = await msg.document.get_file()
        in_name = msg.document.file_name
        mime_type = msg.document.mime_type or ""
        is_pdf = mime_type == "application/pdf" or in_name.lower().endswith(".pdf")
    elif msg.photo:
        file = await msg.photo[-1].get_file()
        in_name = f"photo_{file.file_id}.jpg"
        is_pdf = False
    else:
        await msg.reply_text("Vui l√≤ng g·ª≠i PDF ho·∫∑c ·∫£nh.")
        return
    
    in_path = os.path.join(DOWNLOAD_DIR, in_name)
    out_path = os.path.join(DOWNLOAD_DIR, f"outlined_{in_name.rsplit('.', 1)[0]}.pdf")
    await msg.reply_text("ƒêang x·ª≠ l√Ω, vui l√≤ng ch·ªù...‚è≥")
    await file.download_to_drive(in_path)
    try:
        if is_pdf:
            process_pdf_to_pdf(in_path, out_path, opts["invert"], opts["stroke"], opts["dpi"], opts["precision"], opts["min_len"])
        else:
            process_imagefile_to_pdf(in_path, out_path, opts["invert"], opts["stroke"], opts["precision"], opts["min_len"])
        await msg.reply_document(document=open(out_path,"rb"), caption="‚úÖ ƒê√¢y l√† khu√¥n PDF c·ªßa b·∫°n.")
    except Exception as e:
        await msg.reply_text(f"L·ªói: {e}")

def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_doc))
    app.add_handler(MessageHandler(filters.PHOTO, handle_doc))
    print("Bot started ‚úÖ")
    app.run_polling()

if __name__ == "__main__":
    main()
