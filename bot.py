import os, asyncio
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from tracing import process_pdf_to_pdf, process_imagefile_to_pdf, count_pdf_pages

load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
DOWNLOAD_DIR = os.getenv("DOWNLOAD_DIR", "./work")
os.makedirs(DOWNLOAD_DIR, exist_ok=True)

WAITING_FOR_PAGES = 1

HELP = """G·ª≠i PDF ho·∫∑c ·∫£nh ƒë·ªÉ bot v·∫Ω l·∫°i ƒë∆∞·ªùng k·∫ª th√†nh file khu√¥n PDF ‚úÇÔ∏è

üéØ M·∫∑c ƒë·ªãnh: ƒê·ªô ch√≠nh x√°c 100% (precision=0, dpi=600)

T√πy ch·ªânh (ghi v√†o caption):
‚Ä¢ invert=true/false - ƒë·∫£o m√†u (m·∫∑c ƒë·ªãnh: true)
‚Ä¢ stroke=2.0 - ƒë·ªô d√†y n√©t (m·∫∑c ƒë·ªãnh: 2.0)
‚Ä¢ dpi=600 - ƒë·ªô ph√¢n gi·∫£i (m·∫∑c ƒë·ªãnh: 600)
‚Ä¢ precision=0 - ƒë·ªô ch√≠nh x√°c 100% (m·∫∑c ƒë·ªãnh: 0)
‚Ä¢ min_len=10 - ƒë·ªô d√†i n√©t t·ªëi thi·ªÉu (m·∫∑c ƒë·ªãnh: 10)

üìÑ V·ªõi file PDF nhi·ªÅu trang, bot s·∫Ω h·ªèi b·∫°n mu·ªën x·ª≠ l√Ω trang n√†o!"""

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Xin ch√†o üëã\n" + HELP)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ƒê√£ h·ªßy. G·ª≠i file m·ªõi ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫°i!")
    return ConversationHandler.END

def parse_opts(text: str):
    opts = {"invert": True, "stroke": 2.0, "dpi": 600, "precision": 0, "min_len": 10}
    if not text: return opts
    for t in text.split():
        if t.startswith("invert="): opts["invert"] = t.split("=")[1].lower() in ["true","1"]
        elif t.startswith("stroke="): opts["stroke"] = float(t.split("=")[1])
        elif t.startswith("dpi="): opts["dpi"] = int(t.split("=")[1])
        elif t.startswith("precision="): opts["precision"] = float(t.split("=")[1])
        elif t.startswith("min_len="): opts["min_len"] = int(t.split("=")[1])
    return opts

async def handle_doc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    cap = msg.caption or ""
    opts = parse_opts(cap)
    
    is_pdf = False
    if msg.document:
        file = await msg.document.get_file()
        in_name = msg.document.file_name
        mime_type = msg.document.mime_type or ""
        is_pdf = mime_type == "application/pdf" or in_name.lower().endswith(".pdf")
    elif msg.photo:
        file = await msg.photo[-1].get_file()
        in_name = f"photo_{file.file_id}.jpg"
        is_pdf = False
    else:
        await msg.reply_text("Vui l√≤ng g·ª≠i PDF ho·∫∑c ·∫£nh.")
        return ConversationHandler.END
    
    in_path = os.path.join(DOWNLOAD_DIR, in_name)
    out_path = os.path.join(DOWNLOAD_DIR, f"outlined_{in_name.rsplit('.', 1)[0]}.pdf")
    
    await file.download_to_drive(in_path)
    
    if is_pdf:
        try:
            num_pages = count_pdf_pages(in_path)
            context.user_data["in_path"] = in_path
            context.user_data["out_path"] = out_path
            context.user_data["opts"] = opts
            context.user_data["total_pages"] = num_pages
            
            await msg.reply_text(
                f"üìÑ File PDF c√≥ {num_pages} trang.\n\n"
                f"B·∫°n mu·ªën x·ª≠ l√Ω trang n√†o?\n"
                f"‚Ä¢ Ghi 'all' ho·∫∑c 't·∫•t c·∫£' ƒë·ªÉ x·ª≠ l√Ω h·∫øt\n"
                f"‚Ä¢ Ghi s·ªë trang (VD: 1 ho·∫∑c 1-3 ho·∫∑c 1,3,5)"
            )
            return WAITING_FOR_PAGES
        except Exception as e:
            await msg.reply_text(f"L·ªói khi ƒë·ªçc PDF: {e}")
            return ConversationHandler.END
    else:
        await msg.reply_text("ƒêang x·ª≠ l√Ω, vui l√≤ng ch·ªù...‚è≥")
        try:
            process_imagefile_to_pdf(in_path, out_path, opts["invert"], opts["stroke"], opts["precision"], opts["min_len"])
            await msg.reply_document(document=open(out_path,"rb"), caption="‚úÖ ƒê√¢y l√† khu√¥n PDF c·ªßa b·∫°n.")
        except Exception as e:
            await msg.reply_text(f"L·ªói: {e}")
        return ConversationHandler.END

async def handle_page_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    response = msg.text.strip().lower()
    
    in_path = context.user_data.get("in_path")
    out_path = context.user_data.get("out_path")
    opts = context.user_data.get("opts", {})
    total_pages = context.user_data.get("total_pages", 1)
    
    first_page = None
    last_page = None
    
    try:
        if response in ["all", "t·∫•t c·∫£", "tat ca", "h·∫øt", "het"]:
            first_page = 1
            last_page = total_pages
            page_desc = f"t·∫•t c·∫£ {total_pages} trang"
        elif "-" in response:
            parts = response.split("-")
            first_page = int(parts[0].strip())
            last_page = int(parts[1].strip())
            page_desc = f"trang {first_page}-{last_page}"
        elif "," in response:
            await msg.reply_text("‚ö†Ô∏è Hi·ªán t·∫°i ch∆∞a h·ªó tr·ª£ ch·ªçn trang r·ªùi r·∫°c. Vui l√≤ng ch·ªçn kho·∫£ng trang (VD: 1-3) ho·∫∑c 'all'")
            return WAITING_FOR_PAGES
        else:
            page_num = int(response)
            first_page = page_num
            last_page = page_num
            page_desc = f"trang {page_num}"
        
        if first_page < 1 or last_page > total_pages or first_page > last_page:
            await msg.reply_text(f"‚ùå S·ªë trang kh√¥ng h·ª£p l·ªá. PDF c√≥ {total_pages} trang. Vui l√≤ng th·ª≠ l·∫°i:")
            return WAITING_FOR_PAGES
        
        await msg.reply_text(f"‚è≥ ƒêang x·ª≠ l√Ω {page_desc} v·ªõi ƒë·ªô ch√≠nh x√°c 100%...\nVui l√≤ng ch·ªù!")
        
        process_pdf_to_pdf(
            in_path, out_path, 
            opts["invert"], opts["stroke"], opts["dpi"], 
            opts["precision"], opts["min_len"],
            first_page=first_page, last_page=last_page
        )
        
        await msg.reply_document(document=open(out_path,"rb"), caption=f"‚úÖ ƒê√£ ho√†n th√†nh {page_desc}!")
        
    except ValueError:
        await msg.reply_text("‚ùå ƒê·ªãnh d·∫°ng kh√¥ng ƒë√∫ng. Vui l√≤ng ghi s·ªë trang (VD: 1 ho·∫∑c 1-3) ho·∫∑c 'all':")
        return WAITING_FOR_PAGES
    except Exception as e:
        await msg.reply_text(f"‚ùå L·ªói: {e}")
    
    return ConversationHandler.END

def main():
    app = Application.builder().token(TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Document.ALL | filters.PHOTO, handle_doc)
        ],
        states={
            WAITING_FOR_PAGES: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_page_selection)]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    )
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    
    print("Bot started ‚úÖ")
    app.run_polling()

if __name__ == "__main__":
    main()
